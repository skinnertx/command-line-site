/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 lowPolyComputerTex.glb --instanceall 
Files: lowPolyComputerTex.glb [2.7MB] > lowPolyComputerTex-transformed.glb [202.06KB] (93%)
*/

import React, { useRef, useMemo, useContext, createContext } from 'react'
import { useGLTF, Merged } from '@react-three/drei'



const context = createContext()
export function Instances({ children, ...props }) {
  const { nodes } = useGLTF('/lowPolyComputerTex-transformed.glb')
  const instances = useMemo(
    () => ({
      Cube: nodes.Cube001,
      Cube1: nodes.Cube001_1,
      Cube2: nodes.Cube001_2,
      Plane: nodes.Plane,
      Plane1: nodes.Plane_1,
    }),
    [nodes]
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export function ComputerLowPoly(props) {
  const instances = useContext(context)
  return (
    <group {...props} dispose={null}>
      <group position={[0, 0.81, 0]}>
        <instances.Cube />
        <instances.Cube1 />
        <instances.Cube2 />
      </group>
      <group position={[0.044, 0.961, 0.139]} scale={[0.972, 0.589, 0.473]}>
        <instances.Plane />
        <instances.Plane1 />
      </group>
    </group>
  )
}

useGLTF.preload('/lowPolyComputerTex-transformed.glb')

{/* 
  Create a grid of instanced low poly computer models

  PARAMETERS
  row - how many rows of computer models
  col - how many cols of computer models
  spacing - controls distance (x and z simultaneously) between successive models
  omit - controls whether a single model is omitted (for placing the high poly model)
  x - row position of omitted model
  z - col position of omitted model
  rot - rotation of the models
  anchor - the position of the first model in the grid, in 3D space

  all parameters are 1-indexed due to the fact that row/col must be greater
  than 0 for any dimensionality. This made it easier to say "skip the model at
  x=1 and z=3" and not have to deal with any OBO errors
*/}
export function LowPolyGrid({
  row = 2, 
  col = 5, 
  spacing = 3, 
  omit = false, 
  x = 0, 
  z = 0, 
  rot=[0,0,0],
  anchor=[0,0,0]
}) {
  
  const data = new Array(row*col);
  
  for (var i = 0; i < row; i++) {
      for (var j = 0; j < col; j++) {
        if (!omit || i != (x-1) || j != (z-1)) {
          data[(i*col) + j] = [i*spacing,0,j*spacing]
        }
      }
  }
  
  return (
    <Instances>
      <group position={anchor}>
        {data.map((pos, i) => {
          return (
            <ComputerLowPoly 
              key={i} 
              position={pos}
              rotation={rot}  
            />
          )} 
        )}
      </group>
    </Instances>
  )
}