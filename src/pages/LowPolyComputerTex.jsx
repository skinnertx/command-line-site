/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 lowPolyComputerTex.glb --instanceall 
Files: lowPolyComputerTex.glb [2.7MB] > lowPolyComputerTex-transformed.glb [202.06KB] (93%)
*/

import React, { useRef, useMemo, useContext, createContext } from 'react'
import { useGLTF, Merged } from '@react-three/drei'

// Constants that control the grid of computers in the scene
const row = 10;
const col = 10;
const spacing = 3;

const context = createContext()
export function Instances({ children, ...props }) {
  const { nodes } = useGLTF('/lowPolyComputerTex-transformed.glb')
  const instances = useMemo(
    () => ({
      Cube: nodes.Cube001,
      Cube1: nodes.Cube001_1,
      Cube2: nodes.Cube001_2,
      Plane: nodes.Plane,
      Plane1: nodes.Plane_1,
    }),
    [nodes]
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export function ComputerLowPoly(props) {
  const instances = useContext(context)
  return (
    <group {...props} dispose={null}>
      <group position={[0, 0.81, 0]}>
        <instances.Cube />
        <instances.Cube1 />
        <instances.Cube2 />
      </group>
      <group position={[0.044, 0.961, 0.139]} scale={[0.972, 0.589, 0.473]}>
        <instances.Plane />
        <instances.Plane1 />
      </group>
    </group>
  )
}

useGLTF.preload('/lowPolyComputerTex-transformed.glb')

export function LowPolyGrid() {
  
  const data = new Array(row*col);
  
  for (var i = 0; i < row; i++) {
      for (var j = 0; j < col; j++) {
          data[(i*col) + j] = [i*spacing,0,j*spacing]
      }
  }

  return (
    <Instances>
      <group position={[(spacing * row)/-2, 0, -20]}>
        {data.map((pos, i) => {
          return (
            <ComputerLowPoly key={i} position={pos} />
          )} 
        )}
      </group>
    </Instances>
  )
}